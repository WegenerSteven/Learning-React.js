/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as WriteRouteImport } from './routes/write'
import { Route as LoginRouteImport } from './routes/login'
import { Route as FeaturesRouteImport } from './routes/features'
import { Route as ContactRouteImport } from './routes/contact'
import { Route as CategoriesRouteImport } from './routes/categories'
import { Route as BlogsRouteImport } from './routes/blogs'
import { Route as AboutRouteImport } from './routes/about'
import { Route as IndexRouteImport } from './routes/index'
import { Route as BlogPostIdRouteImport } from './routes/blog.$postId'

const WriteRoute = WriteRouteImport.update({
  id: '/write',
  path: '/write',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const FeaturesRoute = FeaturesRouteImport.update({
  id: '/features',
  path: '/features',
  getParentRoute: () => rootRouteImport,
} as any)
const ContactRoute = ContactRouteImport.update({
  id: '/contact',
  path: '/contact',
  getParentRoute: () => rootRouteImport,
} as any)
const CategoriesRoute = CategoriesRouteImport.update({
  id: '/categories',
  path: '/categories',
  getParentRoute: () => rootRouteImport,
} as any)
const BlogsRoute = BlogsRouteImport.update({
  id: '/blogs',
  path: '/blogs',
  getParentRoute: () => rootRouteImport,
} as any)
const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const BlogPostIdRoute = BlogPostIdRouteImport.update({
  id: '/blog/$postId',
  path: '/blog/$postId',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/blogs': typeof BlogsRoute
  '/categories': typeof CategoriesRoute
  '/contact': typeof ContactRoute
  '/features': typeof FeaturesRoute
  '/login': typeof LoginRoute
  '/write': typeof WriteRoute
  '/blog/$postId': typeof BlogPostIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/blogs': typeof BlogsRoute
  '/categories': typeof CategoriesRoute
  '/contact': typeof ContactRoute
  '/features': typeof FeaturesRoute
  '/login': typeof LoginRoute
  '/write': typeof WriteRoute
  '/blog/$postId': typeof BlogPostIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/blogs': typeof BlogsRoute
  '/categories': typeof CategoriesRoute
  '/contact': typeof ContactRoute
  '/features': typeof FeaturesRoute
  '/login': typeof LoginRoute
  '/write': typeof WriteRoute
  '/blog/$postId': typeof BlogPostIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/blogs'
    | '/categories'
    | '/contact'
    | '/features'
    | '/login'
    | '/write'
    | '/blog/$postId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/blogs'
    | '/categories'
    | '/contact'
    | '/features'
    | '/login'
    | '/write'
    | '/blog/$postId'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/blogs'
    | '/categories'
    | '/contact'
    | '/features'
    | '/login'
    | '/write'
    | '/blog/$postId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  BlogsRoute: typeof BlogsRoute
  CategoriesRoute: typeof CategoriesRoute
  ContactRoute: typeof ContactRoute
  FeaturesRoute: typeof FeaturesRoute
  LoginRoute: typeof LoginRoute
  WriteRoute: typeof WriteRoute
  BlogPostIdRoute: typeof BlogPostIdRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/write': {
      id: '/write'
      path: '/write'
      fullPath: '/write'
      preLoaderRoute: typeof WriteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/features': {
      id: '/features'
      path: '/features'
      fullPath: '/features'
      preLoaderRoute: typeof FeaturesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/contact': {
      id: '/contact'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof ContactRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/categories': {
      id: '/categories'
      path: '/categories'
      fullPath: '/categories'
      preLoaderRoute: typeof CategoriesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/blogs': {
      id: '/blogs'
      path: '/blogs'
      fullPath: '/blogs'
      preLoaderRoute: typeof BlogsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/blog/$postId': {
      id: '/blog/$postId'
      path: '/blog/$postId'
      fullPath: '/blog/$postId'
      preLoaderRoute: typeof BlogPostIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  BlogsRoute: BlogsRoute,
  CategoriesRoute: CategoriesRoute,
  ContactRoute: ContactRoute,
  FeaturesRoute: FeaturesRoute,
  LoginRoute: LoginRoute,
  WriteRoute: WriteRoute,
  BlogPostIdRoute: BlogPostIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
